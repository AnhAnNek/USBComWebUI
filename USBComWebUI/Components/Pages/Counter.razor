@page "/counter"
@using USBComWebUI.Components.Services
@rendermode InteractiveServer
@implements IDisposable
@using ChartJs.Blazor
@using ChartJs.Blazor.PieChart
@using ChartJs.Blazor.LineChart


<PageTitle>LED Control System</PageTitle>   

<script src="https://cdn.jsdelivr.net/npm/chart.js@2.9.4/dist/Chart.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js"></script>

<!-- This is the glue between Blazor and Chart.js -->
<script src="_content/ChartJs.Blazor.Fork/ChartJsBlazorInterop.js"></script>

@if (isSuccess)
{
    <div class="alert alert-success">
        Operation was successful!
    </div>
}
else if (isFailure)
{
    <div class="alert alert-danger">
        Operation failed. Please try again.
    </div>
}
else
{
    <p>No operation has been performed yet.</p>
}

<h1 class="text-center text-success">LED CONTROL SYSTEMS</h1>

<div class="container">
    <div class="row">
        <!-- Main Controller Section -->
        <div class="col-md-6">
            <h3>Main Controller</h3>
            <div class="mb-2">
                <button class="btn btn-primary me-2" @onclick="TurnOnLED1">LED1 ON</button>
                <button class="btn btn-danger" @onclick="TurnOffLED1">LED1 OFF</button>
            </div>
            <div class="mb-2">
                <button class="btn btn-primary me-2" @onclick="TurnOnLED2">LED2 ON</button>
                <button class="btn btn-danger" @onclick="TurnOffLED2">LED2 OFF</button>
            </div>
        </div>

        <!-- Communication Section -->
        <div class="col-md-6">
            <h3>Communication</h3>
            <div class="mb-3">
                <label for="comport" class="form-label">Select Comport:</label>
                <select id="comport" class="form-select" @bind="selectedComport">
                    @foreach (var port in availableComports)
                    {
                        <option value="@port">@port</option>
                    }
                </select>
            </div>
            <div class="mb-3">
                <label for="baudrate" class="form-label">Baudrate:</label>
                <select id="baudrate" class="form-select" @bind="selectedBaudrate">
                    <option value="9600">9600</option>
                    <option value="115200">115200</option>
                </select>
            </div>
            <div class="mb-3">
                <label for="parity" class="form-label">Parity:</label>
                <select id="parity" class="form-select" @bind="selectedParity">
                    <option value="None">None</option>
                    <option value="Even">Even</option>
                    <option value="Odd">Odd</option>
                </select>
            </div>
            <button class="btn btn-success me-2" @onclick="Connect">CONNECT</button>
            <button class="btn btn-danger" @onclick="Disconnect">EXIT</button>
        </div>
    </div>

    <div @bind="selectedComport"></div>

    <!-- Data Section -->
    <div class="mt-4">
        <h3>Data</h3>
        <div class="row">
            <div class="col-md-4">
                <label for="temperature" class="form-label">Temperature</label>
                <input id="temperature" class="form-control" type="text" readonly value="@temperature" />
            </div>
            <div class="col-md-4">
                <label for="pressure" class="form-label">Press:</label>
                <input id="pressure" class="form-control" type="text" readonly value="@pressure" />
            </div>
            <div class="col-md-4">
                <label for="humidity" class="form-label">Humi:</label>
                <input id="humidity" class="form-control" type="text" readonly value="@humidity" />
            </div>
        </div>
    </div>
    <Chart Config="_pieConfig"></Chart>

    <Chart Config="_lineConfig"></Chart>
</div>

@code {
    private PieConfig _pieConfig;
    private LineConfig _lineConfig;
    private string selectedComport;
    private int selectedBaudrate = 9600;
    private string selectedParity = "None";
    public string temperature = "25°C";
    private string pressure = "... hPa";
    private string humidity = "...%";
    private ComConnection comConnection;
    private bool isSuccess = false;
    private bool isFailure = false;

    private List<string> availableComports = new List<string>
    {
        "COM1",
        "COM2",
        "COM3",
        "COM4"
    };

    private void TurnOnLED1() => comConnection.Send("B1");
    private void TurnOffLED1() => comConnection.Send("T1");

    private void TurnOnLED2() => comConnection.Send("B2");
    private void TurnOffLED2() => comConnection.Send("T2");

    protected override void OnInitialized()
    {

        Init();
        ConfigurePieConfig();
        ConfigureLineConfig();
    }
    private void ConfigureLineConfig()
    {
        _lineConfig = new LineConfig();
        _lineConfig.Options = new LineOptions
            {
                Responsive = true,
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = "Line Chart Example"
                }
            };

        // Thêm dữ liệu cho LineChart
        _lineConfig.Data.Labels.Add("January");
        _lineConfig.Data.Labels.Add("February");
        _lineConfig.Data.Labels.Add("March");

        var dataset = new LineDataset<int>(new[] { 10,140, 15 })
            {
                Label = "Sample Data",  // Dòng dữ liệu
                Fill = true,  // Cho phép điền màu dưới đường
                BorderColor = ColorUtil.ColorHexString(0, 0, 255),  // Màu đường
                BackgroundColor = ColorUtil.ColorHexString(0, 0, 255)  // Màu nền của đường (màu trong suốt)
            };
        _lineConfig.Data.Datasets.Add(dataset);
    }

    private void ConfigurePieConfig(){
        _pieConfig = new PieConfig();
        _pieConfig.Options = new PieOptions
            {
                Responsive = true,
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = "my chart"
                }
            };
        foreach(var party in new []{"part1", "part2","part3"}){
            _pieConfig.Data.Labels.Add(party);
        }

        var dataset = new PieDataset<int>(new[] { 35, 40,15 }){
            BackgroundColor = new[]{
                ColorUtil.ColorHexString(255,0,0),
                ColorUtil.ColorHexString(0,255,0),
                ColorUtil.ColorHexString(0,0,255),

            }
        };
        _pieConfig.Data.Datasets.Add(dataset);


    }

    private void Init()
    {
        comConnection = new ComConnection();
        availableComports = comConnection.GetAllPorts();

        selectedComport = availableComports.FirstOrDefault() ?? "COM1"; // Default to first COM port


        comConnection.OnDataReceived += OnDataReceivedHandler;

        Console.WriteLine("Initialization complete");
    }

    private void Connect()
    {
        Boolean connected = comConnection.OnConn(selectedComport, selectedBaudrate);
        if (connected)
        {
            isSuccess = true;
            isFailure = false;
        }
        else
        {
            isSuccess = false;
            isFailure = true;
        }
    }

    private void OnDataReceivedHandler(string data)
    {
        Console.WriteLine($"Callback: Data received - {data}");
        temperature = data;
        InvokeAsync(StateHasChanged);
    }

    private void Disconnect()
    {
        comConnection.OnDisconnect();
        Console.WriteLine("Disconnected");
    }

    public void Dispose()
    {
        comConnection?.OnDisconnect();
        comConnection.OnDataReceived -= OnDataReceivedHandler;
    }
}
