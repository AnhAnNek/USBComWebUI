@page "/"
@rendermode InteractiveServer

<PageTitle>Chat</PageTitle>

<h1>Chat & Serial Port Communication</h1>

<div class="container">
    <div class="row">
        <!-- Chat Section -->
        <div class="col-md-6">
            <h2>Messages</h2>
            <ul>
                @foreach (var message in Messages)
                {
                    <li>@message</li>
                }
            </ul>
            <div>@NewMessage</div>
            <input type="text" @bind="NewMessage" placeholder="Type a message..." class="form-control" />

            <button @onclick="SendMessage" class="btn btn-primary mt-2">Send</button>
        </div>

        <!-- Serial Port Section -->
        <div class="col-md-6">
            <h2>Serial Port Communication</h2>
            <label for="comPorts">Available COM Ports:</label>
            <select id="comPorts" @bind="SelectedCOMPort" class="form-control">
                <option value="" disabled selected>Select a COM port</option>
                @if (COMPorts?.Any() == true)
                {
                    @foreach (var port in COMPorts)
                    {
                        <option value="@port">@port</option>
                    }
                }
                else
                {
                    <option value="" disabled>No COM ports available</option>
                }
            </select>
            <button @onclick="ConnectToSerialPort" class="btn btn-success mt-2" disabled="@(string.IsNullOrEmpty(SelectedCOMPort))">Connect</button>

            <h3 class="mt-4">Incoming Data</h3>
            <ul>
                @foreach (var data in SerialPortData)
                {
                    <li>@data</li>
                }
            </ul>
        </div>
    </div>
</div>

@code {
    // Chat-related variables
    private List<string> Messages = new List<string>();
    private string NewMessage = "";

    // Serial Port-related variables
    private List<string> COMPorts = new List<string>();
    private string SelectedCOMPort;
    private List<string> SerialPortData = new List<string>();
    private System.IO.Ports.SerialPort CurrentSerialPort;

    // On component initialization, load available COM ports
    protected override async Task OnInitializedAsync()
    {
        await LoadCOMPorts();

        Messages.Add("You: Xin Chao");
        Messages.Add("You: Tra loi di");
    }

    private async Task LoadCOMPorts()
    {
        try
        {
            // Fetch available COM ports
            COMPorts = await Task.Run(() => System.IO.Ports.SerialPort.GetPortNames().ToList());
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error fetching COM ports: " + ex.Message);
        }
    }

    private void SendMessage()
    {
        Messages.Add(NewMessage);

        if (CurrentSerialPort != null && CurrentSerialPort.IsOpen)
        {
            try
            {
                CurrentSerialPort.WriteLine(NewMessage);
            }
            catch (Exception ex)
            {
                Messages.Add($"Error sending message: {ex.Message}");
            }
        }
        else
        {
            Messages.Add("Error: Serial port is not connected.");
        }

         NewMessage = string.Empty;
    }

    private async Task ConnectToSerialPort()
    {
        if (!string.IsNullOrEmpty(SelectedCOMPort))
        {
            try
            {
                // Initialize and open the serial port
                CurrentSerialPort = new System.IO.Ports.SerialPort(SelectedCOMPort, 9600); // Adjust baud rate as needed
                CurrentSerialPort.DataReceived += SerialPortDataReceived;
                CurrentSerialPort.Open();

                SerialPortData.Add($"Connected to {SelectedCOMPort}.");
            }
            catch (Exception ex)
            {
                SerialPortData.Add($"Error connecting to {SelectedCOMPort}: {ex.Message}");
            }
        }
    }

    private void SerialPortDataReceived(object sender, System.IO.Ports.SerialDataReceivedEventArgs e)
    {
        try
        {
            // Read incoming data from the serial port
            string incomingData = CurrentSerialPort?.ReadLine();
            if (!string.IsNullOrEmpty(incomingData))
            {
                // Update the UI with the received data
                InvokeAsync(() =>
                {
                    SerialPortData.Add($"Received: {incomingData}");
                    StateHasChanged();
                });
            }
        }
        catch (Exception ex)
        {
            SerialPortData.Add($"Error reading data: {ex.Message}");
        }
    }

    public void Dispose()
    {
        // Clean up the serial port connection when the component is disposed
        if (CurrentSerialPort != null && CurrentSerialPort.IsOpen)
        {
            CurrentSerialPort.DataReceived -= SerialPortDataReceived;
            CurrentSerialPort.Close();
            CurrentSerialPort.Dispose();
        }
    }
}