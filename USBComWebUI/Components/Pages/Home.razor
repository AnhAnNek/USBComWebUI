@page "/"
@using USBComWebUI.Components.Services
@rendermode InteractiveServer

<PageTitle>Chat</PageTitle>

<h1>Chat & Serial Port Communication</h1>


@if (isSuccess)
{
    <div class="alert alert-success">
        Operation was successful!
    </div>
}
else if (isFailure)
{
    <div class="alert alert-danger">
        Operation failed. Please try again.
    </div>
}
else
{
    <p>No operation has been performed yet.</p>
}

<div class="container">
    <div class="row">
        <!-- Chat Section -->
        <div class="col-md-6">
            <h2>Messages</h2>
            <ul>
                @foreach (var message in Messages)
                {
                    <li>@message</li>
                }
            </ul>
            <div>@NewMessage</div>
            <input type="text" @bind="NewMessage" placeholder="Type a message..." class="form-control" />

            <button @onclick="SendMessage" class="btn btn-primary mt-2">Send</button>
        </div>

        <!-- Serial Port Section -->
        <div class="col-md-6">
            <h2>Serial Port Communication</h2>
            <label for="comPorts">Available COM Ports:</label>
            <select id="comPorts" @bind="SelectedCOMPort" class="form-control">
                <option value="" disabled selected>Select a COM port</option>
                @if (COMPorts?.Any() == true)
                {
                    @foreach (var port in COMPorts)
                    {
                        <option value="@port">@port</option>
                    }
                }
                else
                {
                    <option value="" disabled>No COM ports available</option>
                }
            </select>
            <button @onclick="ConnectToSerialPort" class="btn btn-success mt-2" disabled="@(string.IsNullOrEmpty(SelectedCOMPort))">Connect</button>
            <button @onclick="DisconnectToSerialPort" class="btn btn-danger mt-2" disabled="@(comConnection != null)">Disconnect</button>

            <h3 class="mt-4">Incoming Data</h3>
            <ul>
                @foreach (var data in SerialPortData)
                {
                    <li>@data</li>
                }
            </ul>
        </div>
    </div>
</div>

@code {
    // Chat-related variables
    private List<string> Messages = new List<string>();
    private string NewMessage = "";

    // Serial Port-related variables
    private List<string> COMPorts = new List<string>();
    private string SelectedCOMPort;
    private List<string> SerialPortData = new List<string>();
    private ComConnection comConnection;
    private bool isSuccess = false;
    private bool isFailure = false;

    // On component initialization, load available COM ports
    protected override async Task OnInitializedAsync()
    {
        await LoadCOMPorts();

        comConnection.OnDataReceived += OnReceived;

        Messages.Add("Xin Chao");
    }

    private async Task LoadCOMPorts()
    {
        try
        {
            comConnection = new ComConnection();
            COMPorts = comConnection.GetAllPorts();
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error fetching COM ports: " + ex.Message);
        }
    }

    private void SendMessage()
    {
        if (string.IsNullOrEmpty(NewMessage))
        {
            Console.WriteLine("Message is Required");
            return;
        }

        if (comConnection != null)
        {
            try
            {
                comConnection.Send(NewMessage);
                Messages.Add(NewMessage);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error sending message: {ex.Message}");
            }
        }
        else
        {
            Console.WriteLine("Error: Serial port is not connected.");
        }

        NewMessage = string.Empty;
    }

    private async Task ConnectToSerialPort()
    {
        if (!string.IsNullOrEmpty(SelectedCOMPort))
        {
            try
            {
                Boolean connected = comConnection.OnConn(SelectedCOMPort, 9600);
                if (connected)
                {
                    isSuccess = true;
                    isFailure = false;
                    Console.WriteLine($"Connected to {SelectedCOMPort}.");
                    SerialPortData.Add($"Connected to {SelectedCOMPort}.");
                }
                else
                {
                    isSuccess = false;
                    isFailure = true;
                }

            }
            catch (Exception ex)
            {
                SerialPortData.Add($"Error connecting to {SelectedCOMPort}: {ex.Message}");
            }
        }
    }

    private async Task DisconnectToSerialPort()
    {
        comConnection.OnDisconnect();
    }

    private void OnReceived(string incomingData)
    {
        try
        {
            if (!string.IsNullOrEmpty(incomingData))
            {
                // Update the UI with the received data
                InvokeAsync(() =>
                {
                    SerialPortData.Add($"Received: {incomingData}");
                    StateHasChanged();
                });
            }
        }
        catch (Exception ex)
        {
            SerialPortData.Add($"Error reading data: {ex.Message}");
        }
    }

    public void Dispose()
    {
        comConnection.OnDisconnect();
        comConnection.OnDataReceived -= OnReceived;
    }
}